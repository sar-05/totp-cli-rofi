#!/usr/bin/env bash
set -euf -o pipefail

# configuration
cfgDir="${XDG_CONFIG_HOME:-$HOME/.config}/totp-cli-rofi"
[ -f "${cfgDir}/config" ] && source "${cfgDir}/config"
## START VARS from config
# override GNUPGHOME var
: ${MY_GPGDIR:=}
# path to json file
: ${MY_GPG_JSON_PATH:=${cfgDir}/json.pgp}
# disable encryption
: ${MY_DISABLE_GPG:=0}
# should code be autopasted (xdotool)
: ${MY_AUTOPASTE:=1}
# autopaste delay ( fix for js on some web pages )
: ${MY_AUTOPASTE_DELAY:=0.1}
# should code be loaded into clipboard (xclip)
: ${MY_AUTOCLIPBOARD:=0}
## END VARS from config
[ -n "${MY_GPGDIR}" ] && export GNUPGHOME="${MY_GPGDIR}"

# use hash of json.pgp contents as cache for names
MY_NAMES_TXT_PATH="${TMPDIR:-/tmp}/totp-cli-rofi-names-$(sha256sum "${MY_GPG_JSON_PATH}" | cut -d ' ' -f1 | tr -d '\n')"

my_istrue() {
  case "$1" in
  y | yes | 1) return 0 ;;
  *) return 1 ;;
  esac
}
my_decrypt() {
  returnCode=0
  my_istrue "${MY_DISABLE_GPG}" &&
    {
      output="$(cat -)"
      returnCode="$?"
    } ||
    {
      output="$(cat - | gpg -d)"
      returnCode="$?"
    }
  echo "${output}"
  return "${returnCode}"
}
my_help() {
  cat >&2 <<EOF
Getting started with ${0}

Create config folder
> mkdir -pv "${cfgDir}"

Create config file (optional) see "VARS from config" above
> touch "${cfgDir}/config"

Create simple json file with format
{ "TEXT NAME": {"secret":"SECRET","digits":6,"period":30,"issuer":"TEXT ISSUER",NEXT ... }
example json and creation of gpg encrypted ${MY_GPG_JSON_PATH}
> echo '{ "Example.com":{"secret": "P8AKZ4RBH81ROVBH","digits": 6,"period": 30,"issuer": "Example"},NEXT ... }' | gpg -ear "GPG_KEY_ID" > "${MY_GPG_JSON_PATH}"

rofi example
> rofi -show totp -modi totp:totp-cli-rofi

cli example
> totp-cli-rofi # use fzf to choose the name ( needs TTY )
> totp-cli-rofi "Example Name" # select the option by Name directly

optional disable autopaste
> echo "MY_AUTOPASTE=0" >> "${cfgDir}/config"

optional enable autoclipboard
> echo "MY_AUTOCLIPBOARD=1" >> "${cfgDir}/config"

optional and not recommended - disable encryption
> echo "MY_DISABLE_GPG=1" >> "${cfgDir}/config"

EOF
}
my_check() {
  if [ ! -e "${MY_GPG_JSON_PATH}" ]; then
    echo "json.pgp filepath ${MY_GPG_JSON_PATH} does not exist!" >&2
    echo ""
    my_help
    exit 1
  fi
  if [ ! -e "${MY_NAMES_TXT_PATH}" ]; then
    # text file is missing - create it.
    namesTXTContent="$(cat "${MY_GPG_JSON_PATH}" | my_decrypt | jq -r 'keys[]')"
    [ ! -z "${namesTXTContent}" ] && echo "${namesTXTContent}" >"${MY_NAMES_TXT_PATH}"
  fi
}

name="${1:-}"

[ "$name" == "--help" ] || [ "$name" == "-h" ] && {
  my_help
  exit
}

if [ -z "${SKIP_ROFI_PART:-}" ] && [ -n "${DISPLAY}" ] && [ -n "${ROFI_RETV:-}" ]; then
  # rofi mode
  if [ -n "$name" ]; then
    # option has been selected
    export SKIP_ROFI_PART=1
    coproc "$0" "$name" >/dev/null 2>&1
    exec 1>&-
    exit
  else
    # print options
    my_check
    cat "${MY_NAMES_TXT_PATH}"
    exit
  fi
fi

my_check

if [ -z "$name" ]; then
  if [ ! -t 0 ]; then
    echo "name is empty!" 1>&2
    exit 1
  fi
  name=$(cat "${MY_NAMES_TXT_PATH}" | fzf)
fi

totpParams="$(
  cat "${MY_GPG_JSON_PATH}" |
    my_decrypt |
    jq -r ".\"$name\""'|"-d \(.digits) -s \(.period) -b \(.secret)"' |
    tr -d '\n'
)"

totp="$(oathtool --totp=sha1 ${totpParams})"

if { [ -z "$DISPLAY" ] && [ -z "$WAYLAND_DISPLAY" ]; } || { ! my_istrue "${MY_AUTOCLIPBOARD}" && ! my_istrue "${MY_AUTOPASTE}"; }; then
  echo "$totp"
elif [ -n "${WAYLAND_DISPLAY}" ]; then
  my_istrue "${MY_AUTOCLIPBOARD}" && echo "$totp" | wl-copy
  # autopaste if required
  my_istrue "${MY_AUTOPASTE}" && {
    ydotool type "$totp"
    # delay pressing enter
    [ -n "${MY_AUTOPASTE_DELAY}" ] && sleep "${MY_AUTOPASTE_DELAY}"
    ydotool key Return
  }
else
  # load into clipboard if required
  my_istrue "${MY_AUTOCLIPBOARD}" && echo "$totp" | xclip -selection clipboard
  # autopaste if required
  my_istrue "${MY_AUTOPASTE}" && {
    xdotool type "$totp"
    # delay pressing enter
    [ -n "${MY_AUTOPASTE_DELAY}" ] && sleep "${MY_AUTOPASTE_DELAY}"
    xdotool key Return
  }
fi
